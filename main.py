from Crypto.Cipher import AES
import base64

def decrypt_data(encrypted_base64):
    # 密钥和IV
    key = b'huangyinhuangyin'  # 16字节
    iv = b'sskjKingFree5138'    # 16字节

    # Base64解码密文
    ciphertext = base64.b64decode(encrypted_base64)

    # 创建AES解密器
    cipher = AES.new(key, AES.MODE_CBC, iv)

    # 解密
    decrypted_bytes = cipher.decrypt(ciphertext)

    # 去除末尾的空字节并转换为字符串
    decrypted_text = decrypted_bytes.decode('utf-8').rstrip('\x00')

    return decrypted_text

# 示例密文（替换为实际数据中的data字段）
encrypted_data = "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
